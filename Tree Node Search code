#include <iostream>
#include <vector>
using namespace std;
struct Node {
 int data;
 Node* left;
 Node* right;
};
Node* newNode(int data) {
 Node* node = new Node;
 node->data = data; // O(1)
 node->left = node->right = NULL; // O(1)
 return node; // O(1)
}
bool findNode(Node* root, int target, vector<Node*> &path) {
 if (root == NULL) // O(1)
 return false;
 path.push_back(root); // O(1)
 if (root->data == target) // O(1)
 return true;
 if (findNode(root->left, target, path) || findNode(root->right, target, 
path)) // T(n) = 2T(n/2) + O(1)
 return true;
 path.pop_back(); // O(1)
 return false;
}
void printPath(vector<Node*> path) {
 cout << "Path from root to target node: ";
 for (auto node : path) { // O(n)
 cout << node->data << " ";
 }
 cout << endl;
}
int main() {
 Node* root = newNode(1); // O(1
root->left = newNode(2);
 root->right = newNode(3);
 root->left->left = newNode(4);
 root->right->left = newNode(5);
 root->right->right = newNode(6);
 int target = 5;
 vector<Node*> path;
 if (findNode(root, target, path)) {
 printPath(path);
 } else {
 cout << "Node not found in the tree." << endl;
 }
 return 0;
}
